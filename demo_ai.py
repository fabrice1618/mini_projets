#!/usr/bin/env python3
"""
Script de d√©monstration de l'int√©gration IA
Teste toutes les fonctionnalit√©s principales
"""

from ai_assistant import process_user_request, test_connection
import time

def print_section(title):
    """Affiche un titre de section"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70 + "\n")

def test_prompt(prompt, delay=2):
    """Teste un prompt et affiche le r√©sultat"""
    print(f"üìù Prompt: {prompt}")
    print("-" * 70)
    result = process_user_request(prompt)
    print(f"{result['message']}")
    if result['modified']:
        print("\n‚úÖ Base de donn√©es modifi√©e")
    print()
    time.sleep(delay)  # Pause pour ne pas surcharger Ollama

def main():
    print_section("D√âMONSTRATION DE L'ASSISTANT IA")

    # Test de connexion
    print("üîå Test de connexion √† Ollama...")
    if not test_connection():
        print("‚ùå Impossible de se connecter √† Ollama")
        print("Assurez-vous qu'Ollama est d√©marr√©: sudo systemctl start ollama")
        return
    print("‚úÖ Connexion √† Ollama r√©ussie\n")

    # PROJETS
    print_section("1. GESTION DES PROJETS")

    print("‚û§ Cr√©ation de projets:")
    test_prompt("Cr√©e un projet 'D√©monstration IA' avec la description 'Test complet du syst√®me'")
    test_prompt("Ajoute un nouveau projet 'Formation Python'")

    print("‚û§ Listing de projets:")
    test_prompt("Affiche tous les projets")
    test_prompt("Liste les projets ouverts")

    # T√ÇCHES
    print_section("2. GESTION DES T√ÇCHES")

    print("‚û§ Cr√©ation de t√¢ches:")
    test_prompt("Cr√©e une action 'Pr√©parer la pr√©sentation' dans le projet 1")
    test_prompt("Ajoute une r√©union 'Kickoff meeting' le 2025-11-01 10:00:00 pour 60 minutes dans le projet 1")
    test_prompt("Cr√©er un cours 'Introduction Python' le 2025-11-05 14:00:00 avec √©ch√©ance au 2025-11-05 18:00:00 dans le projet 1")

    print("‚û§ Listing de t√¢ches:")
    test_prompt("Liste les t√¢ches du projet 1")
    test_prompt("Montre-moi les prochaines t√¢ches √† venir")

    print("‚û§ Modification de t√¢ches:")
    test_prompt("Passe la t√¢che 1 √† 50% d'avancement")
    test_prompt("Change le titre de la t√¢che 2 en 'R√©union de lancement'")

    # RECHERCHES
    print_section("3. RECHERCHES ET REQU√äTES")

    test_prompt("Affiche toutes les r√©unions")
    test_prompt("Liste les actions")
    test_prompt("Quels sont mes projets ?")

    # OP√âRATIONS AVANC√âES
    print_section("4. OP√âRATIONS AVANC√âES")

    print("‚û§ Consultation de d√©tails:")
    test_prompt("Affiche les d√©tails du projet 1")
    test_prompt("Montre-moi la t√¢che 1")

    print("‚û§ Modifications:")
    test_prompt("Modifie la description du projet 1 en 'Description mise √† jour'")
    test_prompt("Ferme le projet 2")

    print_section("D√âMONSTRATION TERMIN√âE")
    print("‚úÖ Tous les tests ont √©t√© ex√©cut√©s avec succ√®s!")
    print("\nL'assistant IA est maintenant int√©gr√© dans l'application NiceGUI.")
    print("Lancez l'application avec: python kanban_view_nice.py")

if __name__ == "__main__":
    main()
